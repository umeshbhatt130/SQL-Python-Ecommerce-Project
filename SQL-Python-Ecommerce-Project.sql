USE ecommerce

#Basic Queries
#1. List all unique cities where customers are located.

SELECT DISTINCT( customer_city) FROM customers;

#2. Count the number of orders placed in 2017.
SELECT COUNT(order_purchase_timestamp) FROM orders
WHERE year(order_purchase_timestamp) = 2017;

#3. Find the total sales per category.

SELECT upper(products.product_category), ROUND(SUM(payments.payment_value),2) AS payment_value
FROM products JOIN order_items
ON products.product_id = order_items.product_id
JOIN payments
ON payments.order_id = order_items.order_id
GROUP BY products.product_category
ORDER BY payment_value DESC;

#4. Calculate the percentage of orders that were paid in installments.

select round((((sum(case when payment_installments > 1 then 1
else 0 end))/count(*))*100),2)  AS Installment_pctg from payments;

#5. Count the number of customers from each state. 

SELECT customer_state, count(customer_id) AS No_of_Customers
FROM customers
GROUP BY customer_state
order by No_of_Customers DESC;

#Intermediate Queries
#1. Calculate the number of orders per month in 2018.

SELECT month(order_purchase_timestamp) AS Month_No, monthname(order_purchase_timestamp) As Month_Name, count(order_id) as Orders
FROM orders
WHERE year(order_purchase_timestamp) = 2018
group by Month_No, Month_Name
order by Month_No;

#2. Find the average number of products per order, grouped by customer city.

with Coc AS (
     SELECT  
         orders.order_id, 
         orders.customer_id, 
         COUNT(order_items.order_id) AS oc
     FROM orders 
     JOIN order_items ON orders.order_id = order_items.order_id
	 GROUP BY orders.order_id, orders.customer_id
)
SELECT 
    customers.customer_city, 
    round(avg(Coc.oc),2) as Average_order
FROM customers 
JOIN Coc ON customers.customer_id = Coc.customer_id
GROUP BY customers.customer_city
order by Average_order desc

#3. Calculate the percentage of total revenue contributed by each product category.

WITH cte AS (
    SELECT
        products.product_category AS Category,
        ROUND(SUM(order_items.price + order_items.freight_value), 2) AS Revenue
    FROM orders
    JOIN order_items ON orders.order_id = order_items.order_id
    JOIN products ON products.product_id = order_items.product_id
    GROUP BY products.product_category
)
SELECT
    Category, 
    Revenue, ROUND((Revenue / SUM(Revenue) OVER()) * 100, 2) AS Percentage
FROM cte
GROUP BY Category, Revenue;


#4. Identify the correlation between product price and the number of times a product has been purchased.


#5. Calculate the total revenue generated by each seller, and rank them by revenue.

SELECT order_items.seller_id, ROUND(sum(payments.payment_value),2)
FROM order_items JOIN payments
ON order_items.order_id = payments.order_id
GROUP BY order_items.seller_id;

#Advanced Queries
#1. Calculate the moving average of order values for each customer over their order history.

WITH join_TABLE AS 
(SELECT orders.customer_id, orders.order_purchase_timestamp, payments.payment_value AS payments
FROM payments JOIN orders
ON payments.order_id = orders.order_id )
SELECT 
    customer_id, 
    order_purchase_timestamp, 
    payments,
    ROUND(AVG(payments) OVER (partition by customer_id order by order_purchase_timestamp
    rows between 2 preceding and current row ),2) as Moving_Average
FROM
join_TABLE

#2. Calculate the cumulative sales per month for each year.

WITH cte as 
  (select 
     year(orders.order_purchase_timestamp) AS Years,
     month(orders.order_purchase_timestamp)AS Months,
     monthname(orders.order_purchase_timestamp) AS Month_Name,
     SUM(payments.payment_value ) AS payment
  from orders join payments
  on orders.order_id = payments.order_id
  GROUP BY Years, Months, Month_Name)
SELECT 
     Years, Months, Month_Name, payment,
     round( SUM(payment) over (order by Years, Months),2) as Cumulative_sales
FROM cte


#3. Calculate the year-over-year growth rate of total sales.

WITH a AS (
    SELECT customers.customer_id, 
           MIN(orders.order_purchase_timestamp) AS first_order 
    FROM customers 
    JOIN orders ON customers.customer_id = orders.customer_id 
    GROUP BY customers.customer_id
), 

b AS (
    SELECT a.customer_id, 
           COUNT(DISTINCT orders.order_purchase_timestamp) AS next_order 
    FROM a 
    JOIN orders ON orders.customer_id = a.customer_id 
               AND orders.order_purchase_timestamp > a.first_order 
               AND orders.order_purchase_timestamp < DATE_ADD(a.first_order, INTERVAL 6 MONTH) 
    GROUP BY a.customer_id
) 

SELECT 100 * (COUNT(DISTINCT a.customer_id) / COUNT(DISTINCT b.customer_id))
FROM a 
LEFT JOIN b ON a.customer_id = b.customer_id;

#5. Identify the top 3 customers who spent the most money in each year.

SELECT * FROM
(
    SELECT
        YEAR(orders.order_purchase_timestamp) AS Years,
        orders.customer_id AS Customer,
        ROUND(SUM(payments.payment_value), 2) AS Payments_value,
        DENSE_RANK() OVER (PARTITION BY YEAR(orders.order_purchase_timestamp) ORDER BY SUM(payments.payment_value) DESC) AS D_Rank
    FROM orders
    JOIN payments ON orders.order_id = payments.order_id
    GROUP BY Years, Customer
) AS a
WHERE D_Rank <= 3;
